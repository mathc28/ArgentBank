{"ast":null,"code":"const handleSubmit = async event => {\n  event.preventDefault();\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const token = data.body.token;\n\n      // Call API pour obtenir les données du profil de l'utilisateur\n      const profilInfos = await fetch('http://localhost:3001/api/v1/user/profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}` // Inclure le token dans les en-têtes\n        }\n      });\n      if (!profilInfos.ok) {\n        throw new Error('Failed to fetch user profile data');\n      }\n\n      // Extraire les données du profil de la réponse\n      const profileData = await profilInfos.json();\n\n      // Dispatch des informations d'authentification\n      dispatch(setUserAuth({\n        email,\n        token\n      }));\n\n      // Dispatch des informations utilisateur (userName, firstName, lastName)\n      dispatch(setUserInfos({\n        email: profileData.body.email,\n        userName: profileData.body.userName,\n        // Assurez-vous que les noms correspondent aux clés du profil\n        firstName: profileData.body.firstName,\n        lastName: profileData.body.lastName\n      }));\n      navigate('/user');\n      resetForm();\n    } else {\n      const errorData = await response.json();\n      setError(errorData.message || \"Une erreur est survenue. Veuillez réessayer.\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    setError(\"Une erreur réseau est survenue. Veuillez vérifier votre connexion.\");\n  }\n};","map":{"version":3,"names":["handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","password","ok","data","json","token","profilInfos","Authorization","Error","profileData","dispatch","setUserAuth","setUserInfos","userName","firstName","lastName","navigate","resetForm","errorData","setError","message","error","console"],"sources":["/Users/mathieucocu/Desktop/formation front end/projet 10/p11- bon argentbank/Frontend/src/components/login/index.jsx"],"sourcesContent":["const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n        const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ email, password }),\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            const token = data.body.token;\n\n            // Call API pour obtenir les données du profil de l'utilisateur\n            const profilInfos = await fetch(\n                'http://localhost:3001/api/v1/user/profile', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`, // Inclure le token dans les en-têtes\n                    },\n                }\n            );\n\n            if (!profilInfos.ok) {\n                throw new Error('Failed to fetch user profile data');\n            }\n\n            // Extraire les données du profil de la réponse\n            const profileData = await profilInfos.json();\n\n            // Dispatch des informations d'authentification\n            dispatch(setUserAuth({ email, token }));\n            \n            // Dispatch des informations utilisateur (userName, firstName, lastName)\n            dispatch(setUserInfos({\n                email: profileData.body.email,\n                userName: profileData.body.userName, // Assurez-vous que les noms correspondent aux clés du profil\n                firstName: profileData.body.firstName,\n                lastName: profileData.body.lastName,\n            }));\n\n            navigate('/user');\n            resetForm();\n        } else {\n            const errorData = await response.json();\n            setError(errorData.message || \"Une erreur est survenue. Veuillez réessayer.\");\n        }\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setError(\"Une erreur réseau est survenue. Veuillez vérifier votre connexion.\");\n    }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,KAAK,IAAK;EAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;EACtB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACb,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,GAAGF,IAAI,CAACN,IAAI,CAACQ,KAAK;;MAE7B;MACA,MAAMC,WAAW,GAAG,MAAMZ,KAAK,CAC3B,2CAA2C,EAAE;QACzCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClCW,aAAa,EAAG,UAASF,KAAM,EAAC,CAAE;QACtC;MACJ,CACJ,CAAC;MAED,IAAI,CAACC,WAAW,CAACJ,EAAE,EAAE;QACjB,MAAM,IAAIM,KAAK,CAAC,mCAAmC,CAAC;MACxD;;MAEA;MACA,MAAMC,WAAW,GAAG,MAAMH,WAAW,CAACF,IAAI,CAAC,CAAC;;MAE5C;MACAM,QAAQ,CAACC,WAAW,CAAC;QAAEX,KAAK;QAAEK;MAAM,CAAC,CAAC,CAAC;;MAEvC;MACAK,QAAQ,CAACE,YAAY,CAAC;QAClBZ,KAAK,EAAES,WAAW,CAACZ,IAAI,CAACG,KAAK;QAC7Ba,QAAQ,EAAEJ,WAAW,CAACZ,IAAI,CAACgB,QAAQ;QAAE;QACrCC,SAAS,EAAEL,WAAW,CAACZ,IAAI,CAACiB,SAAS;QACrCC,QAAQ,EAAEN,WAAW,CAACZ,IAAI,CAACkB;MAC/B,CAAC,CAAC,CAAC;MAEHC,QAAQ,CAAC,OAAO,CAAC;MACjBC,SAAS,CAAC,CAAC;IACf,CAAC,MAAM;MACH,MAAMC,SAAS,GAAG,MAAMzB,QAAQ,CAACW,IAAI,CAAC,CAAC;MACvCe,QAAQ,CAACD,SAAS,CAACE,OAAO,IAAI,8CAA8C,CAAC;IACjF;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CF,QAAQ,CAAC,oEAAoE,CAAC;EAClF;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}